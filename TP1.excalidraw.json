{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "text",
      "version": 681,
      "versionNonce": 456748540,
      "isDeleted": false,
      "id": "Rp_HuDFktN9-oi8X3SmHQ",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1326.148022684591,
      "y": -344.7256710151898,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "width": 703.125,
      "height": 614.4,
      "seed": 438363867,
      "groupIds": [],
      "frameId": "OB54jRy5ogYnIaaJE93NI",
      "roundness": null,
      "boundElements": [],
      "updated": 1727297191344,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <stdio.h>\nint main() {\n    double x = 3.1415926535;\n    double y, z;\n    unsigned long int x0, y0, k;\n    unsigned long long int xi, yi;\n    static int T2[64]= {\n    0x1500, 0x2ef8, 0x4d67, 0x6b02, 0x87be, 0xa395, 0xbe7a, 0xd866,\n    0xf14a, 0x1091b,0x11fcd,0x13552,0x14999,0x15c98,0x16e34,0x17e5f,\n    0x18d03,0x19a01,0x1a545,0x1ae8a,0x1b5c4,0x1bb01,0x1bfde,0x1c28d,\n    0x1c2de,0x1c0db,0x1ba73,0x1b11c,0x1a4b5,0x1953d,0x18266,0x16be0,\n    0x1683e,0x179d8,0x18a4d,0x19992,0x1a789,0x1b445,0x1bf61,0x1c989,\n    0x1d16d,0x1d77b,0x1dddf,0x1e2ad,0x1e5bf,0x1e6e8,0x1e654,0x1e3cd,\n    0x1df2a,0x1d635,0x1cb16,0x1be2c,0x1ae4e,0x19bde,0x1868e,0x16e2e,\n    0x1527f,0x1334a,0x11051,0xe951, 0xbe01, 0x8e0d, 0x5924, 0x1edd };\n    /* Convert double to unsigned long long (64 bits wide)  */\n    xi = *(unsigned long long int*)&x;\n    /* Extract only the first half of the bits of the integer */\n    x0 = (xi & 0xffffffff00000000) >> 32;\n    /* Perform bit shift and subtract from an integer constant to get k */\n    k = 0x5fe80000 - (x0 >> 1);\n    /* T2 is indexed by mostly by exponent bits. \n       Only 5 highest bits from orig 52 in mantissa are used to index T2 */\n    y0 = k - T2[63 & (k >> 14)];\n    /* Pad with zeros for the LS 32 bits, convert back to long long */\n    yi = ((unsigned long long int) y0 << 32);\n    /* Get double from bits making up unsigned long long */ \n    y = *(double*)&yi;\n    /* 1/sqrt(pi) ~ 0.564 */\n    printf(\"%lf\\n\", y);\n    return 0;\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\nint main() {\n    double x = 3.1415926535;\n    double y, z;\n    unsigned long int x0, y0, k;\n    unsigned long long int xi, yi;\n    static int T2[64]= {\n    0x1500, 0x2ef8, 0x4d67, 0x6b02, 0x87be, 0xa395, 0xbe7a, 0xd866,\n    0xf14a, 0x1091b,0x11fcd,0x13552,0x14999,0x15c98,0x16e34,0x17e5f,\n    0x18d03,0x19a01,0x1a545,0x1ae8a,0x1b5c4,0x1bb01,0x1bfde,0x1c28d,\n    0x1c2de,0x1c0db,0x1ba73,0x1b11c,0x1a4b5,0x1953d,0x18266,0x16be0,\n    0x1683e,0x179d8,0x18a4d,0x19992,0x1a789,0x1b445,0x1bf61,0x1c989,\n    0x1d16d,0x1d77b,0x1dddf,0x1e2ad,0x1e5bf,0x1e6e8,0x1e654,0x1e3cd,\n    0x1df2a,0x1d635,0x1cb16,0x1be2c,0x1ae4e,0x19bde,0x1868e,0x16e2e,\n    0x1527f,0x1334a,0x11051,0xe951, 0xbe01, 0x8e0d, 0x5924, 0x1edd };\n    /* Convert double to unsigned long long (64 bits wide)  */\n    xi = *(unsigned long long int*)&x;\n    /* Extract only the first half of the bits of the integer */\n    x0 = (xi & 0xffffffff00000000) >> 32;\n    /* Perform bit shift and subtract from an integer constant to get k */\n    k = 0x5fe80000 - (x0 >> 1);\n    /* T2 is indexed by mostly by exponent bits. \n       Only 5 highest bits from orig 52 in mantissa are used to index T2 */\n    y0 = k - T2[63 & (k >> 14)];\n    /* Pad with zeros for the LS 32 bits, convert back to long long */\n    yi = ((unsigned long long int) y0 << 32);\n    /* Get double from bits making up unsigned long long */ \n    y = *(double*)&yi;\n    /* 1/sqrt(pi) ~ 0.564 */\n    printf(\"%lf\\n\", y);\n    return 0;\n}",
      "lineHeight": 1.2,
      "baseline": 610
    },
    {
      "type": "text",
      "version": 746,
      "versionNonce": 1641643972,
      "isDeleted": false,
      "id": "TZdKt_HQUlvAYXT_3J-gy",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1305.9213887611004,
      "y": 435.7379524861813,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "width": 825,
      "height": 307.2,
      "seed": 11883387,
      "groupIds": [],
      "frameId": "Kpm-ceEsUxgbp3j5aizCJ",
      "roundness": null,
      "boundElements": [],
      "updated": 1727297191345,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "float Q_rsqrt( float number )\n{\n    long i;\n    float x2, y;\n    const float threehalfs = 1.5F;\n\n    x2 = number * 0.5F;\n    y  = number;\n    i  = * ( long * ) &y;                       // evil floating point bit level hacking\n    i  = 0x5f3759df - ( i >> 1 );               // what the fuck? \n    y  = * ( float * ) &i;\n    y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration\n//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed\n\n    return y;\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "float Q_rsqrt( float number )\n{\n    long i;\n    float x2, y;\n    const float threehalfs = 1.5F;\n\n    x2 = number * 0.5F;\n    y  = number;\n    i  = * ( long * ) &y;                       // evil floating point bit level hacking\n    i  = 0x5f3759df - ( i >> 1 );               // what the fuck? \n    y  = * ( float * ) &i;\n    y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration\n//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed\n\n    return y;\n}",
      "lineHeight": 1.2,
      "baseline": 303
    },
    {
      "type": "text",
      "version": 547,
      "versionNonce": 1649561212,
      "isDeleted": false,
      "id": "CkFZcHNCkoiOyoVUEnrcz",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": -401.51348667259776,
      "y": -323.3978100591364,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 900,
      "height": 1516.8,
      "seed": 1062415387,
      "groupIds": [],
      "frameId": "r_zA_Kjhjl1rAKQgyQm61",
      "roundness": null,
      "boundElements": [],
      "updated": 1727297191352,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <sys/resource.h>\n#define _GNU_SOURCE\n\n// Função naïve para normalizar um vetor de características\nvoid normalize_feature_vector(float* features, int length) {\n    float sum = 0.0f;\n    for (int i = 0; i < length; i++) {\n        sum += features[i] * features[i];\n    }\n    float inv_sqrt = 1.0f / sqrt(sum);\n\n    for (int i = 0; i < length; i++) {\n        features[i] *= inv_sqrt;\n    }\n}\n\n// Função para ler dados de um arquivo CSV\nfloat** read_csv(const char* filename, int* num_elements, int* num_dimensions) {\n    FILE* file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Failed to open file\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Determine the number of elements and dimensions\n    *num_elements = 0;\n    *num_dimensions = 0;\n    char line[1024];\n    while (fgets(line, sizeof(line), file)) {\n        if (*num_elements == 0) {\n            char* token = strtok(line, \",\");\n            while (token) {\n                (*num_dimensions)++;\n                token = strtok(NULL, \",\");\n            }\n        }\n        (*num_elements)++;\n    }\n    rewind(file);\n\n    // Allocate memory for the features\n    float** features = (float**)malloc(*num_elements * sizeof(float*));\n    for (int i = 0; i < *num_elements; i++) {\n        features[i] = (float*)malloc(*num_dimensions * sizeof(float));\n    }\n\n    // Read the data\n    int i = 0;\n    while (fgets(line, sizeof(line), file)) {\n        int j = 0;\n        char* token = strtok(line, \",\");\n        while (token) {\n            features[i][j++] = atof(token);\n            token = strtok(NULL, \",\");\n        }\n        i++;\n    }\n\n    fclose(file);\n    return features;\n}\n\n// Função para medir o tempo de execução usando a biblioteca 'resources'\nvoid get_resource_usage(struct rusage* usage) {\n    getrusage(RUSAGE_SELF, usage);\n}\n\nvoid print_resource_usage(const char* label, struct rusage* usage) {\n    printf(\"%s\\n\", label);\n    printf(\"User time: %ld.%06ld seconds\\n\", usage->ru_utime.tv_sec, usage->ru_utime.tv_usec);\n    printf(\"System time: %ld.%06ld seconds\\n\", usage->ru_stime.tv_sec, usage->ru_stime.tv_usec);\n    printf(\"Maximum resident set size: %ld kilobytes\\n\", usage->ru_maxrss);\n}\n\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <sys/resource.h>\n#define _GNU_SOURCE\n\n// Função naïve para normalizar um vetor de características\nvoid normalize_feature_vector(float* features, int length) {\n    float sum = 0.0f;\n    for (int i = 0; i < length; i++) {\n        sum += features[i] * features[i];\n    }\n    float inv_sqrt = 1.0f / sqrt(sum);\n\n    for (int i = 0; i < length; i++) {\n        features[i] *= inv_sqrt;\n    }\n}\n\n// Função para ler dados de um arquivo CSV\nfloat** read_csv(const char* filename, int* num_elements, int* num_dimensions) {\n    FILE* file = fopen(filename, \"r\");\n    if (!file) {\n        perror(\"Failed to open file\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Determine the number of elements and dimensions\n    *num_elements = 0;\n    *num_dimensions = 0;\n    char line[1024];\n    while (fgets(line, sizeof(line), file)) {\n        if (*num_elements == 0) {\n            char* token = strtok(line, \",\");\n            while (token) {\n                (*num_dimensions)++;\n                token = strtok(NULL, \",\");\n            }\n        }\n        (*num_elements)++;\n    }\n    rewind(file);\n\n    // Allocate memory for the features\n    float** features = (float**)malloc(*num_elements * sizeof(float*));\n    for (int i = 0; i < *num_elements; i++) {\n        features[i] = (float*)malloc(*num_dimensions * sizeof(float));\n    }\n\n    // Read the data\n    int i = 0;\n    while (fgets(line, sizeof(line), file)) {\n        int j = 0;\n        char* token = strtok(line, \",\");\n        while (token) {\n            features[i][j++] = atof(token);\n            token = strtok(NULL, \",\");\n        }\n        i++;\n    }\n\n    fclose(file);\n    return features;\n}\n\n// Função para medir o tempo de execução usando a biblioteca 'resources'\nvoid get_resource_usage(struct rusage* usage) {\n    getrusage(RUSAGE_SELF, usage);\n}\n\nvoid print_resource_usage(const char* label, struct rusage* usage) {\n    printf(\"%s\\n\", label);\n    printf(\"User time: %ld.%06ld seconds\\n\", usage->ru_utime.tv_sec, usage->ru_utime.tv_usec);\n    printf(\"System time: %ld.%06ld seconds\\n\", usage->ru_stime.tv_sec, usage->ru_stime.tv_usec);\n    printf(\"Maximum resident set size: %ld kilobytes\\n\", usage->ru_maxrss);\n}\n\n",
      "lineHeight": 1.2,
      "baseline": 1513
    },
    {
      "type": "text",
      "version": 460,
      "versionNonce": 1570563908,
      "isDeleted": false,
      "id": "DOU0upp884zS_n_xFaRuj",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 401.9865743625585,
      "y": -313.3978100591364,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "width": 712.5,
      "height": 614.4,
      "seed": 1777135803,
      "groupIds": [],
      "frameId": "r_zA_Kjhjl1rAKQgyQm61",
      "roundness": null,
      "boundElements": [],
      "updated": 1727297191354,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "int main() {\n    int num_elements, num_dimensions;\n    float** features = read_csv(\"data.csv\", &num_elements, &num_dimensions);\n\n    struct rusage start_usage, end_usage;\n    \n    get_resource_usage(&start_usage);\n    for (int i = 0; i < num_elements; i++) {\n        normalize_feature_vector(features[i], num_dimensions);\n    }\n    get_resource_usage(&end_usage);\n\n    printf(\"Normalized features:\\n\");\n    for (int i = 0; i < num_elements; i++) {\n        for (int j = 0; j < num_dimensions; j++) {\n            printf(\"%f \", features[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    printf(\"Execution time and resource usage:\\n\");\n    print_resource_usage(\"Start Usage\", &start_usage);\n    print_resource_usage(\"End Usage\", &end_usage);\n\n    // Free allocated memory\n    for (int i = 0; i < num_elements; i++) {\n        free(features[i]);\n    }\n    free(features);\n\n    return 0;\n}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "int main() {\n    int num_elements, num_dimensions;\n    float** features = read_csv(\"data.csv\", &num_elements, &num_dimensions);\n\n    struct rusage start_usage, end_usage;\n    \n    get_resource_usage(&start_usage);\n    for (int i = 0; i < num_elements; i++) {\n        normalize_feature_vector(features[i], num_dimensions);\n    }\n    get_resource_usage(&end_usage);\n\n    printf(\"Normalized features:\\n\");\n    for (int i = 0; i < num_elements; i++) {\n        for (int j = 0; j < num_dimensions; j++) {\n            printf(\"%f \", features[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    printf(\"Execution time and resource usage:\\n\");\n    print_resource_usage(\"Start Usage\", &start_usage);\n    print_resource_usage(\"End Usage\", &end_usage);\n\n    // Free allocated memory\n    for (int i = 0; i < num_elements; i++) {\n        free(features[i]);\n    }\n    free(features);\n\n    return 0;\n}",
      "lineHeight": 1.2,
      "baseline": 610
    },
    {
      "type": "text",
      "version": 334,
      "versionNonce": 75177724,
      "isDeleted": false,
      "id": "h3JUXQKvxMeiejj4qWVsK",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 277.2365287415614,
      "y": -710.7356351719826,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1266.35986328125,
      "height": 173.00018310546875,
      "seed": 1915035995,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1727297191359,
      "link": null,
      "locked": false,
      "fontSize": 138.400146484375,
      "fontFamily": 1,
      "text": "Trabalho Prático 1",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Trabalho Prático 1",
      "lineHeight": 1.25,
      "baseline": 122
    },
    {
      "type": "frame",
      "version": 200,
      "versionNonce": 872808961,
      "isDeleted": false,
      "id": "r_zA_Kjhjl1rAKQgyQm61",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": -453.66694132486987,
      "y": -364.833475748698,
      "strokeColor": "#bbb",
      "backgroundColor": "transparent",
      "width": 1644.0003967285156,
      "height": 1591.9999313354492,
      "seed": 1040556251,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1726684519091,
      "link": null,
      "locked": false,
      "name": "Código fornecido pelo Professor"
    },
    {
      "type": "frame",
      "version": 367,
      "versionNonce": 2027149967,
      "isDeleted": false,
      "id": "OB54jRy5ogYnIaaJE93NI",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1264.9992370605473,
      "y": -370.5001195271806,
      "strokeColor": "#bbb",
      "backgroundColor": "transparent",
      "width": 888.0000305175781,
      "height": 672.000020345052,
      "seed": 29272629,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1726684519091,
      "link": null,
      "locked": false,
      "name": "exemplo aplicação - stack overflow"
    },
    {
      "type": "frame",
      "version": 251,
      "versionNonce": 316152289,
      "isDeleted": false,
      "id": "Kpm-ceEsUxgbp3j5aizCJ",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1288.4286048525864,
      "y": 414.9285089401972,
      "strokeColor": "#bbb",
      "backgroundColor": "transparent",
      "width": 862.5142560686386,
      "height": 344.8000183105468,
      "seed": 1255622869,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1726684519091,
      "link": null,
      "locked": false,
      "name": "algoritmo de otimização"
    },
    {
      "type": "text",
      "version": 216,
      "versionNonce": 1804033732,
      "isDeleted": false,
      "id": "nmL4Kpq8OTNUi3x-Pg40_",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1553.5576206170733,
      "y": 862.2440232006636,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 270.8997802734375,
      "height": 50,
      "seed": 1359254113,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1727297191361,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Padrão de entrega Abakós:\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Padrão de entrega Abakós:\n",
      "lineHeight": 1.25,
      "baseline": 43
    },
    {
      "type": "embeddable",
      "version": 186,
      "versionNonce": 1315863932,
      "isDeleted": false,
      "id": "hJQQ7o3x6DtMU4jCyEyE_",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1371.691067031614,
      "y": 903.1829699737375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 633.4110667875747,
      "height": 64.26612056414115,
      "seed": 1181064769,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1727297191299,
      "link": "https://periodicos.pucminas.br/index.php/abakos/about/submissions",
      "locked": false,
      "validated": false
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}